<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lcccc.com.cn/"/>
  <updated>2018-10-17T15:16:12.443Z</updated>
  <id>http://lcccc.com.cn/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux</title>
    <link href="http://lcccc.com.cn/2018/10/17/Linux/"/>
    <id>http://lcccc.com.cn/2018/10/17/Linux/</id>
    <published>2018-10-17T15:01:10.000Z</published>
    <updated>2018-10-17T15:16:12.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h4 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root/Docements # 切换到目录/root/Docements</span><br><span class="line">cd ./path          # 切换到当前目录下的path目录中，“.”表示当前目录  </span><br><span class="line">cd ../path         # 切换到上层目录中的path目录中，“..”表示上一层目录</span><br></pre></td></tr></table></figure><h4 id="ls命令（查看文件与目录）"><a href="#ls命令（查看文件与目录）" class="headerlink" title="ls命令（查看文件与目录）"></a>ls命令（查看文件与目录）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l #以长数据串的形式列出当前目录下的数据文件和目录</span><br><span class="line">ls -lR #以长数据串的形式列出当前目录下的所有文件</span><br></pre></td></tr></table></figure><h4 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -i file # 删除文件file，在删除之前会询问是否进行该操作</span><br><span class="line">rm -fr dir # 强制删除目录dir中的所有文件</span><br></pre></td></tr></table></figure><h4 id="vim命令-文本编辑"><a href="#vim命令-文本编辑" class="headerlink" title="vim命令(文本编辑)"></a>vim命令(文本编辑)</h4><h4 id="pwd-显示当前目录"><a href="#pwd-显示当前目录" class="headerlink" title="pwd(显示当前目录)"></a>pwd(显示当前目录)</h4><h4 id="sz-下载"><a href="#sz-下载" class="headerlink" title="sz(下载)"></a>sz(下载)</h4><h4 id="rz-上传"><a href="#rz-上传" class="headerlink" title="rz(上传)"></a>rz(上传)</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux常用命令&quot;&gt;&lt;a href=&quot;#Linux常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux常用命令&quot;&gt;&lt;/a&gt;Linux常用命令&lt;/h1&gt;&lt;h4 id=&quot;cd命令&quot;&gt;&lt;a href=&quot;#cd命令&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="Linux常用命令" scheme="http://lcccc.com.cn/tags/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>ES6实用性技能</title>
    <link href="http://lcccc.com.cn/2018/10/16/es6/"/>
    <id>http://lcccc.com.cn/2018/10/16/es6/</id>
    <published>2018-10-16T14:00:26.000Z</published>
    <updated>2018-10-16T14:13:22.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6实用性技能"><a href="#ES6实用性技能" class="headerlink" title="ES6实用性技能"></a>ES6实用性技能</h1><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>js（es5）定义函数三种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//语句形式定义函数              </span><br><span class="line">function test1()&#123; </span><br><span class="line">        alert(&quot;hello function1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">//直接量形式定义函数</span><br><span class="line">var test2=function()&#123;</span><br><span class="line">        alert(&quot;hello function2&quot;)；</span><br><span class="line">    &#125;</span><br><span class="line">//直接量形式定义函数</span><br><span class="line">var test3=new Function(&quot;a&quot;,&quot;b&quot;,&quot;return a+b&quot;);</span><br><span class="line">//调用函数</span><br><span class="line">test1();//输出hello function1</span><br><span class="line">test2();//输出hello function2</span><br><span class="line">alert(test3(1,2));//输出3</span><br></pre></td></tr></table></figure><p>es6箭头函数</p><ul><li>不需要 function 关键字来创建函数</li><li>省略 return 关键字</li><li>继承当前上下文的 this 关键字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//例如：</span><br><span class="line">    [1,2,3].map(x =&gt; x + 1)</span><br><span class="line">//等同于：</span><br><span class="line">    [1,2,3].map((function(x)&#123;</span><br><span class="line">        return x + 1</span><br><span class="line">    &#125;).bind(this))</span><br></pre></td></tr></table></figure><h1 id="AntD-Pro实用性技巧"><a href="#AntD-Pro实用性技巧" class="headerlink" title="AntD Pro实用性技巧"></a>AntD Pro实用性技巧</h1><h4 id="条件判断加载组件"><a href="#条件判断加载组件" class="headerlink" title="条件判断加载组件"></a>条件判断加载组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;this.state.xxx ? &lt;Form.Item&gt;&lt;/Form.Item&gt; ：null&#125;</span><br><span class="line">&#123;this.state.xxxx &amp;&amp; &lt;Form.Item&gt;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;selectedRows.length &gt; 0 &amp;&amp; (</span><br><span class="line">                &lt;span&gt;</span><br><span class="line">                  &lt;Button&gt;批量操作&lt;/Button&gt;</span><br><span class="line">                  &lt;Dropdown overlay=&#123;menu&#125;&gt;</span><br><span class="line">                    &lt;Button&gt;</span><br><span class="line">                      更多操作 &lt;Icon type=&quot;down&quot; /&gt;</span><br><span class="line">                    &lt;/Button&gt;</span><br><span class="line">                  &lt;/Dropdown&gt;</span><br><span class="line">                &lt;/span&gt;</span><br><span class="line">              )&#125;</span><br></pre></td></tr></table></figure><h4 id="form表单下拉选中默认值"><a href="#form表单下拉选中默认值" class="headerlink" title="form表单下拉选中默认值"></a>form表单下拉选中默认值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormItem label=&quot;证件类型&quot;&gt;</span><br><span class="line">              &#123;getFieldDecorator(&apos;status&apos;,&#123;</span><br><span class="line">                initialValue:&quot;0&quot;,</span><br><span class="line">              &#125;)(</span><br><span class="line">                &lt;Select style=&#123;&#123; width: &apos;100%&apos; &#125;&#125;&gt;</span><br><span class="line">                  &lt;Option value=&quot;0&quot;&gt;二代身份证&lt;/Option&gt;</span><br><span class="line">                  &lt;Option value=&quot;1&quot;&gt;港澳通行证&lt;/Option&gt;</span><br><span class="line">                  &lt;Option value=&quot;2&quot;&gt;护照&lt;/Option&gt;</span><br><span class="line">                  &lt;Option value=&quot;3&quot;&gt;居住证&lt;/Option&gt;</span><br><span class="line">                &lt;/Select&gt;)&#125;</span><br><span class="line">&lt;/FormItem&gt;</span><br></pre></td></tr></table></figure><h4 id="使用ES6的Object-keys-方法判断对象是否为空对象"><a href="#使用ES6的Object-keys-方法判断对象是否为空对象" class="headerlink" title="使用ES6的Object.keys()方法判断对象是否为空对象"></a>使用ES6的Object.keys()方法判断对象是否为空对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const data = &#123;&#125;;</span><br><span class="line">const arr = Object.keys(data);</span><br><span class="line">alert(arr.length === 0);//true</span><br></pre></td></tr></table></figure><h4 id="对象的扩展（属性名表达式）"><a href="#对象的扩展（属性名表达式）" class="headerlink" title="对象的扩展（属性名表达式）"></a>对象的扩展（属性名表达式）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 方法一</span><br><span class="line">obj.foo = true;</span><br><span class="line"></span><br><span class="line">// 方法二</span><br><span class="line">obj[&apos;a&apos;+&apos;bc&apos;] = 123;</span><br></pre></td></tr></table></figure><p>上面代码的方法一是直接用标识符作为属性名，方法二是用表达式作为属性名，这时要将表达式放在方括号之内。<br>但是，如果使用字面量方式定义对象（使用大括号），在ES5中只能使用方法一（标识符）定义属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: true,</span><br><span class="line">  abc: 123</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ES6允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let propKey = &apos;foo&apos;;</span><br><span class="line"></span><br><span class="line">let obj = &#123;</span><br><span class="line">   [propKey]: true,</span><br><span class="line">   [&apos;a&apos;+&apos;bc&apos;]: 123</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面是另一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var lastWord = &quot;last word&quot;;</span><br><span class="line"></span><br><span class="line">var a = &#123;</span><br><span class="line">    &quot;first word&quot;: &quot;hello&quot;,</span><br><span class="line">    [lastWord]: &quot;world&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a[&quot;first word&quot;] // &quot;hello&quot;</span><br><span class="line">a[lastWord] // &quot;world&quot;</span><br><span class="line">a[&quot;last word&quot;] // &quot;world&quot;</span><br></pre></td></tr></table></figure><p>表达式还可以用于定义方法名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">  [&apos;h&apos;+&apos;ello&apos;]() &#123;</span><br><span class="line">    return &apos;hi&apos;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(obj.hello()); // hi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6实用性技能&quot;&gt;&lt;a href=&quot;#ES6实用性技能&quot; class=&quot;headerlink&quot; title=&quot;ES6实用性技能&quot;&gt;&lt;/a&gt;ES6实用性技能&lt;/h1&gt;&lt;h4 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="web前端" scheme="http://lcccc.com.cn/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ES6" scheme="http://lcccc.com.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>React Router跳转及页面传值</title>
    <link href="http://lcccc.com.cn/2018/09/25/routervalue/"/>
    <id>http://lcccc.com.cn/2018/09/25/routervalue/</id>
    <published>2018-09-25T13:03:59.000Z</published>
    <updated>2018-09-28T12:12:01.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Router跳转及页面传值"><a href="#React-Router跳转及页面传值" class="headerlink" title="React Router跳转及页面传值"></a>React Router跳转及页面传值</h1><h2 id=""><a href="#" class="headerlink" title=""></a><link></h2><ul><li><strong>to: string</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&apos;/courses?sort=name&apos;&gt;跳转&lt;Link&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>to: object</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&#123;&#123;</span><br><span class="line">  pathname: &apos;/courses&apos;,</span><br><span class="line">  search: &apos;?sort=name&apos;,</span><br><span class="line">  hash: &apos;#the-hash&apos;,</span><br><span class="line">  state: &#123; fromDashboard: true &#125;</span><br><span class="line">&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure><h2 id="this-props-params"><a href="#this-props-params" class="headerlink" title="this.props.params"></a>this.props.params</h2><p>1.定义路由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path=&apos;/user/:id&apos; component=&#123;UserPage&#125;&gt;&lt;/Route&gt;</span><br></pre></td></tr></table></figure><p>2.跳转前页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=&#123;`/topics/$&#123;id&#125;`&#125; &gt;点击跳转&lt;/Link&gt;</span><br></pre></td></tr></table></figure><p>3.获取参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.props.params</span><br><span class="line">或者react-router v4高版本</span><br><span class="line">this.props.（match）.params.参数名   获取URL中的参数值</span><br></pre></td></tr></table></figure><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>state方式依然可以传递任意类型的数据，而且可以不以明文方式传输。state传的参数是加密的</p><ul><li>定义路由</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route path= &apos; /user&apos; component= &#123;UserPage&#125;&gt;&lt;/Route&gt;</span><br></pre></td></tr></table></figure><ul><li>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const data = &#123;id:3,name:sam,age:36&#125;;</span><br><span class="line">const path = &#123;pathname: &apos; /user&apos;,state:data,&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.&lt;Link to=&#123;path&#125;&gt; 用户&lt;/Link&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2.import &#123; hashHistory &#125; from &apos;react-router&apos;</span><br><span class="line">    hashHistory.push (path); </span><br><span class="line">//  browserHistory.push(); 表单跳转</span><br><span class="line">//  this.props.history.push();</span><br></pre></td></tr></table></figure><ul><li>获取数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const data = this.props.location.state;</span><br><span class="line">(获取当前路由地址this.props.location.pathname)</span><br><span class="line">const &#123;id, name,age&#125; = data;</span><br></pre></td></tr></table></figure><h2 id="基于-action-进行页面跳转"><a href="#基于-action-进行页面跳转" class="headerlink" title="基于 action 进行页面跳转"></a>基于 action 进行页面跳转</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; routerRedux &#125; from &apos;dva/router&apos;;</span><br><span class="line"></span><br><span class="line">// Inside Effects</span><br><span class="line">yield put(routerRedux.push(&apos;/logout&apos;));</span><br><span class="line"></span><br><span class="line">// Outside Effects</span><br><span class="line">dispatch(routerRedux.push(&apos;/logout&apos;));</span><br><span class="line"></span><br><span class="line">// With query</span><br><span class="line">routerRedux.push(&#123;</span><br><span class="line">  pathname: &apos;/logout&apos;,</span><br><span class="line">  query: &#123;</span><br><span class="line">    page: 2,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="umi官方跳转"><a href="#umi官方跳转" class="headerlink" title="umi官方跳转"></a>umi官方跳转</h2><h3 id="umi-link"><a href="#umi-link" class="headerlink" title="umi/link"></a>umi/link</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Link from &apos;umi/link&apos;;</span><br><span class="line"></span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    /* 普通使用 */</span><br><span class="line">    &lt;Link to=&quot;/list&quot;&gt;Go to list page&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">    /* 带参数 */</span><br><span class="line">    &lt;Link to=&quot;/list?a=b&quot;&gt;Go to list page&lt;/Link&gt;</span><br><span class="line"></span><br><span class="line">    /* 包含子组件 */</span><br><span class="line">    &lt;Link to=&quot;/list?a=b&quot;&gt;&lt;button&gt;Go to list page&lt;/button&gt;&lt;/Link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="umi-router"><a href="#umi-router" class="headerlink" title="umi/router"></a>umi/router</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import router from &apos;umi/router&apos;;</span><br><span class="line"></span><br><span class="line">// 普通跳转，不带参数</span><br><span class="line">router.push(&apos;/list&apos;);</span><br><span class="line"></span><br><span class="line">// 带参数</span><br><span class="line">router.push(&apos;/list?a=b&apos;);</span><br><span class="line">router.push(&#123;</span><br><span class="line">  pathname: &apos;/list&apos;,</span><br><span class="line">  query: &#123;</span><br><span class="line">    a: &apos;b&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"># 对象且不包含 pathname 会报错</span><br><span class="line">router.push(&#123;</span><br><span class="line">  query: &#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：pathname属性不要更改，否则出错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React-Router跳转及页面传值&quot;&gt;&lt;a href=&quot;#React-Router跳转及页面传值&quot; class=&quot;headerlink&quot; title=&quot;React Router跳转及页面传值&quot;&gt;&lt;/a&gt;React Router跳转及页面传值&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="React技术栈" scheme="http://lcccc.com.cn/categories/React%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="React-Router" scheme="http://lcccc.com.cn/tags/React-Router/"/>
    
  </entry>
  
  <entry>
    <title>自建ss服务器教程</title>
    <link href="http://lcccc.com.cn/2018/09/22/ssrbuild/"/>
    <id>http://lcccc.com.cn/2018/09/22/ssrbuild/</id>
    <published>2018-09-22T12:06:23.000Z</published>
    <updated>2018-09-22T12:10:53.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自建ss服务器教程"><a href="#自建ss服务器教程" class="headerlink" title="自建ss服务器教程"></a>自建ss服务器教程</h1><h4 id="2018-9-1更新：vultr官方进行了调整，2-5美元套餐只提供ipv6，如果你用不了ipv6，那么你可以买3-5美元的套餐。"><a href="#2018-9-1更新：vultr官方进行了调整，2-5美元套餐只提供ipv6，如果你用不了ipv6，那么你可以买3-5美元的套餐。" class="headerlink" title="2018.9.1更新：vultr官方进行了调整，2.5美元套餐只提供ipv6，如果你用不了ipv6，那么你可以买3.5美元的套餐。"></a>2018.9.1更新：vultr官方进行了调整，2.5美元套餐只提供ipv6，如果你用不了ipv6，那么你可以买3.5美元的套餐。</h4><p>不怕被封ip，因为vultr是折算成小时计费，且可以随时删除和开通服务器，新服务器就是新的ip。新开服务器只需要0.01美元，即使你运气非常不好，开了10台服务器才获得没有被墙的ip，总创建服务器成本也只有0.1美元，不到1块钱。开通服务器时，当出现了ip，不要立马去ping或者用xshell去连接，再等5分钟之后，有个缓冲时间。</p><p>自建ss/ssr教程很简单，整个教程分三步：</p><ul><li>第一步：购买VPS服务器</li><li>第二步：一键部署VPS服务器</li><li>第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）</li></ul><h3 id="第一步：购买VPS服务器"><a href="#第一步：购买VPS服务器" class="headerlink" title="第一步：购买VPS服务器"></a>第一步：购买VPS服务器</h3><p>VPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高，按小时计费，能够随时开通和删除服务器，新服务器即是新ip。</p><p>vultr注册地址： <a href="http://www.vultr.com/?ref=7048874" target="_blank" rel="noopener">http://www.vultr.com/?ref=7048874</a> （全球15个服务器位置可选，kvm框架，2.5美元/月。如果以后这个vultr注册地址被墙了，那么就用翻墙软件打开，或者用ss/ssr免费账号）</p><p>虽然是英文界面，但是现在的浏览器都有网页翻译功能，鼠标点击右键，选择网页翻译即可翻译成中文。</p><p>注册并邮件激活账号，充值后即可购买服务器。充值方式是支付宝或paypal，使用paypal有银行卡（包括信用卡）即可。paypal注册地址：<a href="https://www.paypal.com" target="_blank" rel="noopener">https://www.paypal.com</a> （paypal是国际知名的第三方支付服务商，注册一下账号，绑定银行卡即可购买国外商品）</p><ul><li>2.5美元/月的服务器配置信息：单核 512M内存 20G SSD硬盘 带宽峰值100M 500G流量/月 (仅ipv6)</li><li>3.5美元/月的服务器配置信息：单核 512M内存 20G SSD硬盘 带宽峰值100M 500G流量/月</li><li>5美元/月的服务器配置信息： 单核 1G内存 25G SSD硬盘 带宽峰值100M 1000G流量/月</li><li>10美元/月的服务器配置信息： 单核 2G内存 40G SSD硬盘 带宽峰值100M 2000G流量/月</li><li>20美元/月的服务器配置信息： 2cpu 4G内存 60G SSD硬盘 带宽峰值100M 3000G流量/月</li><li>40美元/月的服务器配置信息： 4cpu 8G内存 100G SSD硬盘 带宽峰值100M 4000G流量/月</li></ul><p>注意：vultr官方进行了调整，2.5美元套餐只提供ipv6，如果你用不了ipv6，那么你可以买3.5美元的套餐。</p><p>vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后速度不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，方便且实用。因为新的服务器就是新的ip，所以当ip被墙时这个方法很有用。当ip被墙时，为了保证新开的服务器ip和原先的ip不一样，先开新服务器，开好后再删除旧服务器即可。</p><p>计费从你开通服务器开始算的，不管你有没有使用，即使服务器处于关机状态仍然会计费，如果你没有开通服务器就不算。比如你今天早上开通了服务器，但你有事情，晚上才部署，那么这段时间是会计费的。同理，如果你早上删掉服务器，第二天才开通新的服务器，那么这段时间是不会计费的。在账号的Billing选项里可以看到账户余额。</p><p>温馨提醒：同样的服务器位置，不同的宽带类型和地区所搭建的账号的翻墙速度会不同，这与中国电信、中国联通、中国移动国际出口带宽和线路不同有关，所以以实测为准。可以先选定一个服务器位置来按照教程进行搭建，熟悉搭建方法，当账号搭建完成并进行了bbr加速后，测试下速度自己是否满意，如果满意那就用这个服务器位置的服务器。如果速度不太满意，就一次性开几台不同的服务器位置的服务器，然后按照同样的方法来进行搭建并测试，选择最优的，之后把其它的服务器删掉，按小时计费测试成本可以忽略。</p><p>账号充值如图：<br><img src="https://raw.githubusercontent.com/Alvin9999/pac2/master/pp100.png" alt="image"><br><img src="https://raw.githubusercontent.com/Alvin9999/pac2/master/pp101.png" alt="image"></p><p>开通服务器步骤如图：</p><p><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B01.png" alt="image"><br><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B02.png" alt="image"><br><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B04.png" alt="image"></p><p>选择vps操作系统时，==不要选centos7系统==！点击图中的CentOS几个字，会弹出centos6，然后选中centos6！entos7默认的防火墙可能会干扰ssr的正常连接！<br>接下来这一步是开启vps的ipv6 ip，选填项。如果你的电脑系统可以用ipv6，那么可以勾选此项。大多数用户没有这个需求，但有一些用户可能会用到，所以补充了这部分内容。</p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/ssripv6-01.png" alt="image"></p><p>开通服务器时，当出现了ip，不要立马去ping或者用xshell去连接，再等5分钟之后，有个缓冲时间。完成购买后，找到系统的密码记下来，部署服务器时需要用到。vps系统（推荐centos6）的密码获取方法如下图：<br><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B05.png" alt="image"><br><img src="https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B06.png" alt="image"></p><p>如果你开启了vps的ipv6，那么在后台的settings选项可以找到服务器的ipv6 ip。在部署SSR账号时，你用ipv6 ip就行。整个部署及使用过程中，记得把电脑系统开启ipv6喔。</p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/ssripv6-02.png" alt="image"></p><p>删掉服务器步骤如下图：<br><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/de4.PNG" alt="image"><br><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/de2.PNG" alt="image"><br><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/de5.png" alt="image"></p><p>一个被墙ip的vps被删掉后，其ip并不会消失，会随机分配给下一个在这个服务器位置新建服务器的人，这就是为什么开新服务器会有一定几率开到被墙的ip。被墙是指在国内地区无法ping通服务器，但在国外是可以ping通的，vultr是面向全球服务，如果这个被墙ip被国外的人开到了，它是可以被正常使用的，半年或1年后这个被墙的ip可能会被国内防火墙解封，那么这就是一个良性循环。</p><h3 id="第二步：部署VPS服务器"><a href="#第二步：部署VPS服务器" class="headerlink" title="第二步：部署VPS服务器"></a>第二步：部署VPS服务器</h3><p>购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。Xshell windows版下载地址：</p><p><a href="http://45.32.141.248:8000/f/d91974d046/" target="_blank" rel="noopener">国外云盘1下载</a></p><p><a href="https://nofile.io/f/eb5dUzYMQK4/Xshell_setup_wm.exe" target="_blank" rel="noopener">国外云盘2下载</a> 提取密码：666</p><p><a href="https://www.adrive.com/public/NdK3Ez/Xshell_setup_wm.exe" target="_blank" rel="noopener">国外云盘3下载</a> 密码：123</p><p>如果你是苹果电脑操作系统，更简单，无需下载xshell，系统可以直接连接VPS。打开终端（Terminal），输入ssh root@ip 其中“ip”替换成你VPS的ip, 按回车键，然后复制粘贴密码，按回车键即可登录。粘贴密码时有可能不显示密码，但不影响， 参考设置方法 如果不能用MAC自带的终端连接的话，直接网上搜“MAC连接SSH的软件”，有很多，然后通过软件来连接vps服务器就行，具体操作方式参考windows xshell。</p><h3 id="部署教程："><a href="#部署教程：" class="headerlink" title="部署教程："></a>部署教程：</h3><p></p><p>下载windows xshell软件并安装后，打开软件</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell11.png" alt=""></p><p></p><p></p><p>选择文件，新建</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell12.png" alt=""></p><p></p><p></p><p>随便取个名字，然后把你的服务器ip填上</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell13.png" alt=""></p><p></p><p></p><p>连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名默认都是root，密码是你购买的服务器系统的密码。</p><p></p><p></p><h3><p></p><h4 id="如果xshell连不上服务器，没有弹出让你输入用户名和密码的输入框，表明你开到的ip是一个被墙的ip，遇到这种情况，重新开新的服务器，直到能用xshell连上为止，耐心点哦！如果同一个地区开了多台服务器还是不行的话，可以换其它地区。"><a href="#如果xshell连不上服务器，没有弹出让你输入用户名和密码的输入框，表明你开到的ip是一个被墙的ip，遇到这种情况，重新开新的服务器，直到能用xshell连上为止，耐心点哦！如果同一个地区开了多台服务器还是不行的话，可以换其它地区。" class="headerlink" title="如果xshell连不上服务器，没有弹出让你输入用户名和密码的输入框，表明你开到的ip是一个被墙的ip，遇到这种情况，重新开新的服务器，直到能用xshell连上为止，耐心点哦！如果同一个地区开了多台服务器还是不行的话，可以换其它地区。"></a>如果xshell连不上服务器，没有弹出让你输入用户名和密码的输入框，表明你开到的ip是一个被墙的ip，遇到这种情况，重新开新的服务器，直到能用xshell连上为止，耐心点哦！如果同一个地区开了多台服务器还是不行的话，可以换其它地区。</h4></h3><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell14.png" alt=""></p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/xshell2.png" alt=""></p><p></p><p></p><p>连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。</p><p></p><p></p><p>CentOS6/Debian6/Ubuntu14 ShadowsocksR一键部署管理脚本：</p><p></p><p><hr></p><p></p><p>yum -y install wget</p><p></p><p></p><p>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh" rel="noopener" target="_blank">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p><p></p><p></p><p>备用脚本：</p><p></p><p></p><p>yum -y install wget</p><p></p><p></p><p>wget -N –no-check-certificate <a href="https://softs.wtf/Bash/ssr.sh" rel="noopener" target="_blank">https://softs.wtf/Bash/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p><p></p><p></p><p>———————————————————代码分割线————————————————</p><p></p><p></p><p>复制上面的代码到VPS服务器里，复制代码用鼠标右键的复制，然后在vps里面右键粘贴进去，因为ctrl+c和ctrl+v无效。接着按回车键，脚本会自动安装，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：bash ssr.sh</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/8.png" alt=""></p><p></p><p></p><p>如上图出现管理界面后，<strong>输入数字1来安装SSR服务端</strong>。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/31.png" alt=""></p><p></p><p></p><p>根据上图提示，依次输入自己想设置的<strong>端口和密码</strong> (<strong>密码建议用复杂点的字母组合，端口号为40-65535之间的数字</strong>)，回车键用于确认</p><p></p><p></p><p>注：关于端口的设置，总的网络总端口有6万多个，理论上可以任意设置，但不要以0开头！但是有的地区需要设置特殊的端口才有效，一些特殊的端口比如80、143、443、1433、3306、3389、8080。</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/32.png" alt=""></p><p></p><p></p><p>如上图，选择想设置的<strong>加密方式</strong>，比如10，按回车键确认</p><p></p><p></p><p>接下来是选择<strong>协议插件</strong>，如下图：</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/11.png" alt=""></p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/41.PNG" alt=""></p><p></p><p></p><p>选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端（SS客户端没有协议和混淆的选项），可以根据需求进行选择，演示选择y</p><p></p><p></p><p>之后进行混淆插件的设置。</p><p></p><p></p><p><strong>注意：如果协议是origin，那么混淆也必须是plain；如果协议不是origin，那么混淆可以是任意的。有的地区需要把混淆设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。（特别注意：tls 1.2_ticket_auth容易受到干扰！请选择除tls开头以外的其它混淆！！！）</strong></p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/33.png" alt=""></p><p></p><p></p><p>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p><p></p><p></p><p>注意：关于限制设备数，这个协议必须是非原版且不兼容原版才有效，也就是必须使用SSR协议的情况下，才有效！</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/14.png" alt=""></p><p></p><p></p><p>之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/15.png" alt=""></p><p></p><p></p><p>耐心等待一会，出现下面的界面即部署完成：</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/16.png" alt=""></p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/34.png" alt=""></p><p></p><p></p><p>根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件，这些信息需要填入你的SSR客户端。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如：</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/22.png" alt=""></p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/23.png" alt=""></p><p></p><p></p><p><strong>脚本演示结束。</strong></p><p></p><p></p><p>此脚本是开机自动启动，部署一次即可。最后可以重启服务器确保部署生效（一般情况不重启也可以）。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。</p><p></p><p><hr></p><p></p><p><strong>第三步：一键加速VPS服务器</strong></p><p></p><p></p><p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p><p></p><p></p><p>按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p><p></p><p></p><p>【谷歌BBR加速教程】</p><p></p><p></p><p>yum -y install wget</p><p></p><p></p><p>wget –no-check-certificate <a href="https://github.com/teddysun/across/raw/master/bbr.sh" target="_blank" rel="noopener">https://github.com/teddysun/across/raw/master/bbr.sh</a></p><p></p><p></p><p>chmod +x bbr.sh</p><p></p><p></p><p>./bbr.sh</p><p></p><p></p><p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p><p></p><p></p><p>演示开始，如图：</p><p></p><p></p><p>复制并粘贴代码后，按回车键确认</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/18.png" alt=""></p><p></p><p></p><p>如下图提示，按任意键继续部署</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/19.png" alt=""></p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/20.png" alt=""></p><p></p><p></p><p>部署到上图这个位置的时候，等待3～6分钟</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/21.png" alt=""></p><p></p><p></p><p>最后输入y重启服务器，如果输入y提示command not found ，接着输入reboot来重启服务器，确保加速生效，bbr加速脚本是开机自动启动，装一次就可以了。</p><p></p><p></p><p>服务器重启成功并重新连接服务器后，输入命令lsmod | grep bbr  如果出现tcp_bbr字样表示bbr已安装并启动成功。如图：</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/tcp_bbr.PNG" alt=""></p><p></p><p><hr></p><p></p><p>【SSR客户端下载】</p><p></p><p></p><p>第一次电脑系统使用SSR/SS客户端时，如果提示你需要安装NET Framework 4.0，网上搜一下这个东西，安装一下即可。NET Framework 4.0是SSR/SS的运行库，没有这个SSR/SS客户端无法正常运行。有的电脑系统可能会自带NET Framework 4.0。</p><p></p><p></p><p>Windows SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="noopener">下载地址</a> <a href="https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z" rel="noopener" target="_blank">备用下载地址</a></p><p></p><p></p><p>MAC SSR客户端 <a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases" target="_blank" rel="noopener">下载地址</a> <a href="https://nofile.io/f/jgMWFwCBonU#ab0d3c3b6ac54482" rel="noopener" target="_blank">备用下载地址</a></p><p></p><p></p><p><a href="https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr" target="_blank" rel="noopener">Linux客户端一键安装配置使用脚本(使用方法见注释)</a> 或者采用图形界面的<a href="https://github.com/erguotou520/electron-ssr/releases" target="_blank" rel="noopener">linux ssr客户端</a></p><p></p><p></p><p>安卓SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases/download/3.4.0.8/shadowsocksr-release.apk" target="_blank" rel="noopener">下载地址</a> <a href="https://nofile.io/f/rvTJoj0h5GC/shadowsocksr-release.apk" rel="noopener" target="_blank">备用下载地址</a></p><p></p><p></p><p>苹果手机SSR客户端：Potatso Lite、Potatso、shadowrocket都可以作为SSR客户端，但这些软件目前已经在国内的app商店下架，可以用美区的appid账号来下载。但是，如果你配置的SSR账号兼容SS客户端，或者协议选择origin且混淆选择plain，那么你可以选择苹果SS客户端软件（即协议和混淆可以不填），APP商店里面有很多，比如：superwingy、firstwingy、shadowingy、wingy+、banananet、kite-ss proxy、goodshadow、icproyx、shadowrocket等。</p><p></p><p></p><p><strong>有了账号后，打开SSR客户端，填上信息，这里以windows版的SSR客户端为例子</strong>：</p><p></p><p></p><p><img src="https://raw.githubusercontent.com/Alvin9999/PAC/master/demo/42.PNG" alt=""></p><p></p><p></p><p>在对应的位置，填上服务器ip、服务器端口、密码、加密方式、协议和混淆，最后将浏览器的代理设置为（http）127.0.0.1和1080即可。账号的端口号就是你自己设置的，而要上网的浏览器的端口号是1080，固定的，谷歌浏览器可以通过 SwitchyOmega 插件来设置。</p><p></p><p></p><p>启动SSR客户端后，右键SSR客户端图标，选择第一个“系统代理模式”，里面有3个子选项，选择”全局模式“，之后就可以用浏览器设置好了的代理模式（http）127.0.0.1和1080翻墙，此模式下所有的网站都会走SSR代理。</p><p></p><p></p><p><img src="https://user-images.githubusercontent.com/12132898/32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f.png" alt="ssr9000"></p><p></p><p><hr></p><p></p><p><strong>常见问题参考解决方法</strong>：</p><p></p><p></p><p>1、用了一段时间发现ssr账号用不了了</p><p></p><p></p><p>首先ping一下自己的ip，看看能不能ping的通，ping不通那么就是ip被墙了，ip被墙时，xshell也会连接不上服务器，遇到这种情况重新部署一个新的服务器，新的服务器就是新的ip。关于怎么ping ip的方法，可以自行网上搜索，或者用xshell软件连接服务器来判断，连不上即是被墙了。vultr开通和删除服务器非常方便，新服务器即新ip，大多数vps服务商都没有这样的服务，一般的vps服务商可能会提供免费更换1次ip的服务。</p><p></p><p></p><p>2、刚搭建好的ssr账号，ip能ping通，但是还是用不了</p><p></p><p></p><p>首选排除杀毒软件的干扰，尤其是国产杀毒软件，比如360安全卫生、360杀毒软件、腾讯管家、金山卫生等。这些东西很容易干扰翻墙上网，如果你的电脑安装了这样的东西，建议至少翻墙时别用，最好卸载。其次，检查下SSR信息是否填写正确。浏览器的代理方式是否是ssr代理，即（HTTP）127.0.0.1 和1080。如果以上条件都排除，还是用不了，那么可以更换端口、加密方式、协议、混淆，或者更换服务器位置。另外，如果你的vps服务器配置的是SSR账号，即有协议和混淆且没有兼容原版(SS版），那么你必须使用SSSR客户端来使用账号，因为SS客户端没有填写协议和混淆的选项。</p><p></p><p></p><p>3、有的地区需要把混淆参数设置成plain才好用。因为混淆不总是有效果，要看各地区的策略，有时候不混淆（plain）让其看起来像随机数据更好。</p><p></p><p></p><p>4、电脑能用但手机用不了</p><p></p><p></p><p>如果你的手机用的是SS客户端，SS客户端没有填协议和混淆的地方，如果你部署的协议和混淆的时候没有选择兼容原版（SS版），因此手机是用不了的。这个时候你把协议弄成兼容原版、混淆也设置成兼容原版即可。或者直接将协议设置成origin且混淆设置成plain。</p><p></p><p></p><p>5、vps的服务器操作系统不要用的太高，太高可能会因为系统的防火墙问题导致搭建的SSR账号连不上，如果你用的centos系统，建议用centos6，不要用centos7。如果你前面不小心装了centos7系统，那么只能重装系统或者重新部署新的vps服务器。</p><p></p><p></p><p>6、vultr服务商提供的vps服务器是单向流量计算，有的vps服务商是双向流量计算，单向流量计算对于用户来说更实惠。因为我们是在vps服务器上部署SSR服务端后，再用SSR客户端翻墙，所以SSR服务端就相当于中转，比如我们看一个视频，必然会产生流量，假如消耗流量80M，那么VPS服务器会产生上传80M和下载80M流量，vultr服务商只计算单向的80M流量。如果是双向计算流量，那么会计算为160M流量。</p><p></p><p></p><p>7、如果你想把搭建的账号给多人使用，不用额外设置端口，因为一个账号就可以多人使用。一般5美元的服务器可以同时支持40人在线使用。</p><p></p><p></p><p>如果想实现支持每个用户(端口)不同的加密方式/协议/混淆等，并且管理流量使用，可以参考多用户配置脚本：wget -N –no-check-certificate <a href="https://softs.fun/Bash/ssrmu.sh" rel="noopener" target="_blank">https://softs.fun/Bash/ssrmu.sh</a> &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh  备用脚本：wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh" rel="noopener" target="_blank">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssrmu.sh</a> &amp;&amp; chmod +x ssrmu.sh &amp;&amp; bash ssrmu.sh  安装后管理命令为：bash ssrmu.sh</p><p></p><p></p><p>注意：这个多用户配置脚本和教程内容的脚本无法共存！要想用这个脚本，把之前的脚本卸载，输入管理命令bash ssr.sh ，选择3，卸载ShadowsocksR即可卸载原脚本。</p><p></p><p></p><p>8、vultr服务器每月有流量限制，超过限制后服务器不会被停止运行，但是超出的流量会被额外收费。北美和西欧地区的服务器超出流量后，多出的部分收费为0.01美元/G。新加坡和日本东京（日本）为0.025美元/G，悉尼（澳大利亚）为0.05美元/G。把vultr服务器删掉，开通新的服务器，流量会从0开始重新计算。</p><p></p><p></p><p>9、vultr怎样才能申请退款呢？</p><p></p><p></p><p>vultr和其他的国外商家一样，都是使用工单的形式与客服联系，如果需要退款，直接在后台点击support，选择open ticket新开一个工单，选择billing question财务问题，简单的在文本框输入你的退款理由。比如：Please refund all the balance in my account。工单提交以后一般很快就可以给你确认退款，若干个工作日后就会退回你的支付方式。（全额退款结束后，账号可能会被删除）</p><p></p><p></p><p>如果英语水平不好，但是想和客服进行交流，可以用百度在线翻译，自动中文转英文和英文转中文。</p><p></p><p></p><p>10、路由器也可以配置ss/ssr账号，详见openwrt-ssr项目地址：<a href="https://github.com/ywb94/openwrt-ssr" target="_blank" rel="noopener">https://github.com/ywb94/openwrt-ssr</a></p><p></p><p></p><p>11、如果电脑想用搭建的ss/ssr账号玩游戏，即实现类似VPN全局代理，可以用SSTAP，教程：<a href="https://www.jianshu.com/p/519e68b74646" rel="noopener" target="_blank">https://www.jianshu.com/p/519e68b74646</a></p><p></p><blockquote><p><a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">教程转载</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自建ss服务器教程&quot;&gt;&lt;a href=&quot;#自建ss服务器教程&quot; class=&quot;headerlink&quot; title=&quot;自建ss服务器教程&quot;&gt;&lt;/a&gt;自建ss服务器教程&lt;/h1&gt;&lt;h4 id=&quot;2018-9-1更新：vultr官方进行了调整，2-5美元套餐只提供ipv
      
    
    </summary>
    
      <category term="科技范儿" scheme="http://lcccc.com.cn/categories/%E7%A7%91%E6%8A%80%E8%8C%83%E5%84%BF/"/>
    
    
      <category term="SSR自建梯子" scheme="http://lcccc.com.cn/tags/SSR%E8%87%AA%E5%BB%BA%E6%A2%AF%E5%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>React技术栈学习路线</title>
    <link href="http://lcccc.com.cn/2018/09/21/Reactjsz/"/>
    <id>http://lcccc.com.cn/2018/09/21/Reactjsz/</id>
    <published>2018-09-21T02:55:27.000Z</published>
    <updated>2018-09-21T03:03:00.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React技术栈"><a href="#React技术栈" class="headerlink" title="React技术栈"></a>React技术栈</h1><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><p><a href="http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html" target="_blank" rel="noopener">阮一峰-React 技术栈系列教程</a></p><p><a href="https://segmentfault.com/a/1190000012921279" target="_blank" rel="noopener">React入门看这篇就够了</a></p><p><a href="https://react.docschina.org/" target="_blank" rel="noopener">React中文官网</a></p><p><a href="http://huziketang.mangojuice.top/books/react/" target="_blank" rel="noopener">React.js 小书</a></p><h4 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h4><p><a href="https://react-guide.github.io/react-router-cn/" target="_blank" rel="noopener">React Router 中文文档</a></p><p><a href="https://reacttraining.com/react-router/web/guides/philosophy" target="_blank" rel="noopener">React Router 英文文档</a></p><h4 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h4><p><a href="https://redux-saga-in-chinese.js.org/" target="_blank" rel="noopener">redux-saga</a></p><p><a href="http://www.redux.org.cn/" target="_blank" rel="noopener">Redux 中文文档</a></p><h4 id="Dva（dva-是-react-和-redux-的最佳实践）"><a href="#Dva（dva-是-react-和-redux-的最佳实践）" class="headerlink" title="Dva（dva 是 react 和 redux 的最佳实践）"></a>Dva（dva 是 react 和 redux 的最佳实践）</h4><p><a href="https://dvajs.com/" target="_blank" rel="noopener">DvaJS中文官网</a></p><p><a href="https://www.jianshu.com/p/96b5d9d9ad80" target="_blank" rel="noopener">我学 dva 那些事儿</a></p><p><a href="https://www.jianshu.com/p/e184cd6d253c" target="_blank" rel="noopener">dva理论到实践——帮你扫清dva的知识盲点</a></p><p><a href="https://www.npmjs.com/package/mg-roadhog" target="_blank" rel="noopener"> roadhog —— 让 create-react-app 可配的命令行工具</a></p><h4 id="Umi"><a href="#Umi" class="headerlink" title="Umi"></a>Umi</h4><p><a href="https://umijs.org/zh/" target="_blank" rel="noopener">UmiJS</a></p><p>这并不是全部，待续。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React技术栈&quot;&gt;&lt;a href=&quot;#React技术栈&quot; class=&quot;headerlink&quot; title=&quot;React技术栈&quot;&gt;&lt;/a&gt;React技术栈&lt;/h1&gt;&lt;h4 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="React技术栈" scheme="http://lcccc.com.cn/categories/React%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Umijs</title>
    <link href="http://lcccc.com.cn/2018/09/18/Umijs/"/>
    <id>http://lcccc.com.cn/2018/09/18/Umijs/</id>
    <published>2018-09-18T12:55:55.000Z</published>
    <updated>2018-09-18T12:57:59.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UmiJS-核心：插件机制"><a href="#UmiJS-核心：插件机制" class="headerlink" title="UmiJS(核心：插件机制)"></a>UmiJS(核心：插件机制)</h1><p><a href="https://umijs.org/zh/" target="_blank" rel="noopener">UmiJS中文API官网</a></p><h4 id="普通创建"><a href="#普通创建" class="headerlink" title="普通创建"></a>普通创建</h4><p>安装国内源tyarn</p><ul><li>$ npm i yarn tyarn -g</li><li>$ tyarn -v</li></ul><p>安装umi</p><ul><li>$ tyarn global add umi</li><li>$ umi -v</li></ul><p>快速创建page（umi 里==约定==默认情况下 pages 下所有的 js 文件即路由）</p><ul><li>$ mkdir myapp &amp;&amp; cd myapp</li><li>$ umi g page index </li></ul><p>快速创建dva 的 model</p><ul><li>umi g dva:model foo</li></ul><p>启动本地服务器</p><ul><li>$ umi dev</li></ul><p>部署发布</p><ul><li>$ umi build</li></ul><h4 id="通过脚手架创建项目"><a href="#通过脚手架创建项目" class="headerlink" title="通过脚手架创建项目"></a>通过脚手架创建项目</h4><ul><li>$ mkdir myapp &amp;&amp; cd myapp</li><li>$ yarn create umi</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;UmiJS-核心：插件机制&quot;&gt;&lt;a href=&quot;#UmiJS-核心：插件机制&quot; class=&quot;headerlink&quot; title=&quot;UmiJS(核心：插件机制)&quot;&gt;&lt;/a&gt;UmiJS(核心：插件机制)&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://umijs.o
      
    
    </summary>
    
      <category term="React技术栈" scheme="http://lcccc.com.cn/categories/React%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Umijs" scheme="http://lcccc.com.cn/tags/Umijs/"/>
    
  </entry>
  
  <entry>
    <title>Git相关学习</title>
    <link href="http://lcccc.com.cn/2018/09/17/Gitstudy/"/>
    <id>http://lcccc.com.cn/2018/09/17/Gitstudy/</id>
    <published>2018-09-17T13:01:35.000Z</published>
    <updated>2018-09-17T13:11:41.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git相关学习"><a href="#Git相关学习" class="headerlink" title="Git相关学习"></a>Git相关学习</h1><p><img src="http://www.runoob.com/wp-content/uploads/2015/02/f7246b600c338744a9591cd7530fd9f9d62aa0f8.png" alt="Git"></p><h4 id="推荐-梁雪峰Git教程"><a href="#推荐-梁雪峰Git教程" class="headerlink" title="推荐-梁雪峰Git教程"></a><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">推荐-梁雪峰Git教程</a></h4><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a><a href="https://git-scm.com/docs" target="_blank" rel="noopener">官方文档</a></h4><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.git-scm.com/download/" target="_blank" rel="noopener">官方Downloads</a></p><p>安装后配置你的用户名、密码</p><ul><li>$ git config –global user.name “Your Name”</li><li>$ git config –global user.email “<a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</li></ul><h4 id="工具（小乌龟）"><a href="#工具（小乌龟）" class="headerlink" title="工具（小乌龟）"></a>工具（小乌龟）</h4><p><a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">下载链接</a></p><p><a href="https://www.cnblogs.com/xuwenjin/p/8573603.html" target="_blank" rel="noopener">Git客户端(TortoiseGit)基本使用详解</a></p><h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><p>创建空文件夹容器</p><ul><li>$ mkdir learngit</li><li>$ cd learngit</li><li>$ pwd</li></ul><p>通过git init命令把这个目录变成Git可以管理的仓库</p><ul><li>$ git init</li></ul><p>Mac上显示隐藏文件命令</p><ul><li>$ defaults write com.apple.finder AppleShowAllFiles TRUE</li><li>$ killall Finder</li></ul><p>or ==ls -ah==命令</p><p>在所创目录文件下创建文件添加文件到Git仓库，分两步：</p><ul><li>$ git add readme.txt</li><li>$ git commit -m “wrote a readme file”</li></ul><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>显示从最近到最远的提交日志(在Git中，用==HEAD==表示当前版本)</p><ul><li>$ git log –author = name</li></ul><p>回退命令</p><ul><li>$ git reset –hard HEAD^</li></ul><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>创建SSH KEY</p><ul><li>$ ssh-keygen -t rsa -C “<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“</li><li>$ open ~/.ssh 命令直接打开</li></ul><h4 id="把本地仓库的内容推送到GitHub仓库。"><a href="#把本地仓库的内容推送到GitHub仓库。" class="headerlink" title="把本地仓库的内容推送到GitHub仓库。"></a>把本地仓库的内容推送到GitHub仓库。</h4><ul><li>$ git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:michaelliao/learngit.git</li><li>$ git push -u origin master </li></ul><p>git如何解决failed to push some refs to git<br>可以通过如下命令进行代码合并【注：pull=fetch+merge]</p><ul><li>git pull –rebase origin master</li></ul><p>三步走：</p><ul><li>$ git add readme.txt</li><li>$ git commit -m “wrote a readme file”</li><li>$ git push origin master </li></ul><h4 id="git如何上传所有的新文件"><a href="#git如何上传所有的新文件" class="headerlink" title="git如何上传所有的新文件"></a>git如何上传所有的新文件</h4><ul><li>$ git status </li><li>$ git add -A</li><li>$ git commit -a -m”first commit”</li><li>$ git push origin master </li></ul><p>git add上传本地项目所有变化的命令三种</p><ul><li>git add -A  提交所有变化</li><li>git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</li><li>git add . 提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件</li></ul><p>后续。。补充。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git相关学习&quot;&gt;&lt;a href=&quot;#Git相关学习&quot; class=&quot;headerlink&quot; title=&quot;Git相关学习&quot;&gt;&lt;/a&gt;Git相关学习&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://www.runoob.com/wp-content/uploads
      
    
    </summary>
    
      <category term="工具" scheme="http://lcccc.com.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="http://lcccc.com.cn/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Ant Design Pro 2.0</title>
    <link href="http://lcccc.com.cn/2018/09/13/Ant%20Design%20Pro%202.0/"/>
    <id>http://lcccc.com.cn/2018/09/13/Ant Design Pro 2.0/</id>
    <published>2018-09-13T03:15:52.000Z</published>
    <updated>2018-09-18T12:58:34.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ant-Design-Pro-2-0"><a href="#Ant-Design-Pro-2-0" class="headerlink" title="Ant Design Pro 2.0"></a>Ant Design Pro 2.0</h1><h6 id="主要改进和改变详看官网"><a href="#主要改进和改变详看官网" class="headerlink" title="主要改进和改变详看官网"></a>主要改进和改变详看<a href="https://pro.ant.design/" target="_blank" rel="noopener">官网</a></h6><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><ul><li>$ git clone –depth=1 <a href="https://github.com/ant-design/ant-design-pro.git" target="_blank" rel="noopener">https://github.com/ant-design/ant-design-pro.git</a> my-project</li><li>$ cd my-project</li><li>$ npm install</li><li>$ npm start</li></ul><p>使用cnpm加速</p><ul><li>$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></li></ul><h6 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h6><p><img src="https://res.cloudinary.com/dnmtpbj1g/image/upload/v1536987988/%E6%9C%89%E9%81%93%E4%BA%91%E7%AC%94%E8%AE%B0md/QQ20180915-130514.png" alt="目录结构"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ant-Design-Pro-2-0&quot;&gt;&lt;a href=&quot;#Ant-Design-Pro-2-0&quot; class=&quot;headerlink&quot; title=&quot;Ant Design Pro 2.0&quot;&gt;&lt;/a&gt;Ant Design Pro 2.0&lt;/h1&gt;&lt;h6 id=&quot;主
      
    
    </summary>
    
      <category term="React技术栈" scheme="http://lcccc.com.cn/categories/React%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="Ant Design Pro 2.0" scheme="http://lcccc.com.cn/tags/Ant-Design-Pro-2-0/"/>
    
  </entry>
  
  <entry>
    <title>自己热衷的一款Markdown工具-有道云笔记</title>
    <link href="http://lcccc.com.cn/2018/09/12/mdyoudao/"/>
    <id>http://lcccc.com.cn/2018/09/12/mdyoudao/</id>
    <published>2018-09-12T12:44:15.000Z</published>
    <updated>2018-09-12T13:17:23.025Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自己热衷的一款Markdown工具-有道云笔记"><a href="#自己热衷的一款Markdown工具-有道云笔记" class="headerlink" title="自己热衷的一款Markdown工具-有道云笔记"></a>自己热衷的一款Markdown工具-有道云笔记</h3><p>之前有使用过SbulimeText但是效果并不是那么理想。首先，原生的ST并不能在写md文件时预览，要想实现预览功能还得安装插件（懒得折腾）其次最不方便的就是没有实现效果的快捷方式，比如我想插入一张图片，一个链接地址。但是在打开md或其他文件还是挺方便的。有道云笔记作为一个国产工具，不得不说还是相当优秀的，至少现在的我是这样亲身感受的。不仅可以记录笔记还可以作为一款Markdown工具，真是不要太完美。</p><h6 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a><a href="https://note.youdao.com/" target="_blank" rel="noopener">下载地址</a></h6><p><img src="https://res.cloudinary.com/dnmtpbj1g/image/upload/v1536757501/QQ20180912-210050.png" title="有道云笔记截图"></p><p>效果就是如此。想要写出怎样的页面效果，直接看<a href="http://xianbai.me/learn-md/article/about/readme.html" target="_blank" rel="noopener">Markdwon Api文档</a>就行，不用深入，了解就行</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自己热衷的一款Markdown工具-有道云笔记&quot;&gt;&lt;a href=&quot;#自己热衷的一款Markdown工具-有道云笔记&quot; class=&quot;headerlink&quot; title=&quot;自己热衷的一款Markdown工具-有道云笔记&quot;&gt;&lt;/a&gt;自己热衷的一款Markdown工具
      
    
    </summary>
    
      <category term="工具" scheme="http://lcccc.com.cn/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="编辑工具" scheme="http://lcccc.com.cn/tags/%E7%BC%96%E8%BE%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>科学上网-使用Google搜索</title>
    <link href="http://lcccc.com.cn/2018/09/11/chromsearch/"/>
    <id>http://lcccc.com.cn/2018/09/11/chromsearch/</id>
    <published>2018-09-11T09:13:43.000Z</published>
    <updated>2018-09-11T09:27:03.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="科学上网-使用Google搜索"><a href="#科学上网-使用Google搜索" class="headerlink" title="科学上网-使用Google搜索"></a>科学上网-使用Google搜索</h1><p>百度搜索在国内知名度是非常高的，但是用过的都知道，内嵌的广告会误导我们。跟Chrome简直没法比（Chrome全球份额60%啊，想想都可怕）由于一些因素，大家都懂的。国内正常情况下无法使用Chrome搜索。上有政策，下有对策嘛。今天推荐一个插件，安装好了就可以…嘻嘻。</p><p><img src="https://res.cloudinary.com/dnmtpbj1g/image/upload/v1536654106/chromzhus.jpg" title="谷歌访问助手"></p><p><a href="http://www.ggfwzs.com/" title="点击下载插件" target="_blank" rel="noopener">谷歌访问助手</a><br>下载解压出的Crx文件拖进浏览器即可，不会自行谷歌。搜索那就自由发挥啦。</p><p>遗憾的是YouTube是不支持访问的，只支持Chrome搜索和Chrome商店的访问，商店里可以下载一些有用的插件，这里推荐一个超好用的。</p><h2 id="Infinity-新标签页"><a href="#Infinity-新标签页" class="headerlink" title="Infinity 新标签页"></a><a href="https://chrome.google.com/webstore/detail/infinity-new-tabproductiv/dbfmnekepjoapopniengjbcpnbljalfg" title="点击下载插件" target="_blank" rel="noopener">Infinity 新标签页</a></h2><p><img src="https://res.cloudinary.com/dnmtpbj1g/image/upload/v1536656040/unnamed.jpg" title="谷歌访问助手"></p><p>有需的插件可以自行搜索。<br>感觉Google的解析太快了，可能是错觉。哈哈</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;科学上网-使用Google搜索&quot;&gt;&lt;a href=&quot;#科学上网-使用Google搜索&quot; class=&quot;headerlink&quot; title=&quot;科学上网-使用Google搜索&quot;&gt;&lt;/a&gt;科学上网-使用Google搜索&lt;/h1&gt;&lt;p&gt;百度搜索在国内知名度是非常高的，但是
      
    
    </summary>
    
      <category term="科技范儿" scheme="http://lcccc.com.cn/categories/%E7%A7%91%E6%8A%80%E8%8C%83%E5%84%BF/"/>
    
    
      <category term="Chrome" scheme="http://lcccc.com.cn/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>ES6绑定this的三种方式</title>
    <link href="http://lcccc.com.cn/2018/09/11/ES6_bind/"/>
    <id>http://lcccc.com.cn/2018/09/11/ES6_bind/</id>
    <published>2018-09-11T02:25:52.000Z</published>
    <updated>2018-09-11T06:10:35.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-React绑定this的三种方式"><a href="#0-React绑定this的三种方式" class="headerlink" title="0.React绑定this的三种方式"></a>0.React绑定this的三种方式</h1><h2 id="0-1-bind"><a href="#0-1-bind" class="headerlink" title="0.1 bind()"></a>0.1 bind()</h2><pre><code>handleClick (name, e) {    console.log(this.state.message + name)}render () {    return (        &lt;div&gt;            &lt;button onClick={ this.handleClick.bind(this, &apos;赵四&apos;) }&gt;Say Hello&lt;/button&gt;        &lt;/div&gt;    )}</code></pre><h2 id="0-2-构造函数内绑定"><a href="#0-2-构造函数内绑定" class="headerlink" title="0.2 构造函数内绑定"></a>0.2 构造函数内绑定</h2><pre><code>handleClick (e) {    console.log(this.state.message)}render () {    return (        &lt;div&gt;            &lt;button onClick={ this.handleClick }&gt;Say Hello&lt;/button&gt;        &lt;/div&gt;    )}</code></pre><h2 id="0-3-箭头函数-es6语法，用得最多"><a href="#0-3-箭头函数-es6语法，用得最多" class="headerlink" title="0.3 箭头函数(es6语法，用得最多)"></a>0.3 箭头函数(es6语法，用得最多)</h2><pre><code>handleClick = (e) =&gt; {    console.log(this.state.message)}render () {    return (        &lt;div&gt;            &lt;button onClick={ this.handleClick }&gt;Say Hello&lt;/button&gt;        &lt;/div&gt;    )}</code></pre><h2 id="0-4-箭头函数传参"><a href="#0-4-箭头函数传参" class="headerlink" title="0.4 箭头函数传参"></a>0.4 箭头函数传参</h2><pre><code>render () {    return (        &lt;div&gt;            &lt;button onClick={ ()=&gt;this.handleClick(&apos;参数&apos;) }&gt;Say Hello&lt;/button&gt;        &lt;/div&gt;    )}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-React绑定this的三种方式&quot;&gt;&lt;a href=&quot;#0-React绑定this的三种方式&quot; class=&quot;headerlink&quot; title=&quot;0.React绑定this的三种方式&quot;&gt;&lt;/a&gt;0.React绑定this的三种方式&lt;/h1&gt;&lt;h2 id=&quot;0
      
    
    </summary>
    
      <category term="web前端" scheme="http://lcccc.com.cn/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ES6" scheme="http://lcccc.com.cn/tags/ES6/"/>
    
  </entry>
  
</feed>
